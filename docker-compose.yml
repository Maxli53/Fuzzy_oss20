version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fuzzy-postgres
    environment:
      POSTGRES_DB: fuzzy_oss20
      POSTGRES_USER: fuzzy
      POSTGRES_PASSWORD: fuzzy123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fuzzy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fuzzy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fuzzy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fuzzy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fuzzy-backend
    environment:
      DATABASE_URL: postgresql://fuzzy:fuzzy123@postgres:5432/fuzzy_oss20
      REDIS_URL: redis://redis:6379/0
      ARCTIC_URI: lmdb:///app/arctic_storage
      IQFEED_HOST: host.docker.internal  # Connect to IQFeed on host machine
      IQFEED_PORT: 5009
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./foundation:/app/foundation
      - ./stage_01_data_engine:/app/stage_01_data_engine
      - arctic_data:/app/arctic_storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fuzzy-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fuzzy-frontend
    environment:
      REACT_APP_API_URL: http://backend:8000
      REACT_APP_WS_URL: ws://backend:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules
    depends_on:
      - backend
    networks:
      - fuzzy-network
    command: npm start

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: fuzzy-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - fuzzy-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fuzzy-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - fuzzy-network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: fuzzy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl  # For SSL certificates
    depends_on:
      - backend
      - frontend
    networks:
      - fuzzy-network
    profiles:
      - production

networks:
  fuzzy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
  redis_data:
  arctic_data:
  prometheus_data:
  grafana_data: